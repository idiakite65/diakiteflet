https://chat.deepseek.com/a/chat/s/87bac562-6aec-4111-8905-b66bb1b30d83 
school_management/
│
├── app.py                # الملف الرئيسي للتطبيق
├── config.py             # إعدادات التطبيق
├── requirements.txt      # متطلبات المشروع
│
├── extensions/           # امتدادات التطبيق
│   └── database.py       # إعدادات قاعدة البيانات
│
├── models/               # نماذج البيانات
│   ├── __init__.py
│   ├── academic.py       # النماذج الأكاديمية (الصفوف، المواد، الامتحانات)
│   ├── student.py        # نموذج الطالب
│   ├── teacher.py        # نموذج المعلم
│   └── financial.py      # النماذج المالية
│
├── routes/               # مسارات التطبيق
│   ├── __init__.py
│   ├── auth.py           # المصادقة والتسجيل
│   ├── students.py       # إدارة الطلاب
│   ├── teachers.py       # إدارة المعلمين
│   ├── exams.py          # إدارة الامتحانات والدرجات
│   ├── financial.py      # إدارة الشؤون المالية
│   └── reports.py        # التقارير والطباعة
│
├── templates/            # القوالب
│   ├── base.html         # القالب الأساسي
│   ├── auth/             # قوالب المصادقة
│   ├── students/         # قوالب الطلاب
│   ├── teachers/         # قوالب المعلمين
│   ├── exams/            # قوالب الامتحانات
│   └── reports/          # قوالب التقارير
│
├── static/               # الملفات الثابتة
│   ├── css/
│   ├── js/
│   └── images/
│
└── utils/                # أدوات مساعدة
    ├── __init__.py
    ├── decorators.py     # الديكورات المخصصة
    └── helpers.py        # 
دوال مساعدة


2. الملفات الرئيسية بعد التقسيم:
أ) app.py (الملف الرئيسي):
python
from flask import Flask
from config import Config
from extensions.database import db
from routes import (
    auth_bp, 
    students_bp, 
    teachers_bp, 
    exams_bp, 
    financial_bp, 
    reports_bp
)

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)
    
    # تهيئة الامتدادات
    db.init_app(app)
    
    # تسجيل البلوبرينتات
    app.register_blueprint(auth_bp)
    app.register_blueprint(students_bp, url_prefix='/students')
    app.register_blueprint(teachers_bp, url_prefix='/teachers')
    app.register_blueprint(exams_bp, url_prefix='/exams')
    app.register_blueprint(financial_bp, url_prefix='/financial')
    app.register_blueprint(reports_bp, url_prefix='/reports')
    
    return app

if __name__ == '__main__':
    app = create_app()
    app.run(debug=True)
ب) config.py:
python
import os
from pathlib import Path

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'your-very-strong-secret-key-here'
    SESSION_PERMANENT = True
    PERMANENT_SESSION_LIFETIME = 1800  # 30 دقيقة
    
    # إعدادات قاعدة البيانات
    DB_CONFIG = {
        'host': 'localhost',
        'database': 'school_db',
        'user': 'postgres',
        'password': 'password',
        'port': '5432'
    }
    
    # مسارات الملفات
    BASE_DIR = Path(__file__).parent
    TEMPLATE_DIR = BASE_DIR / 'templates'
    STATIC_DIR = BASE_DIR / 'static'
    
    # إعدادات أخرى
    UPLOAD_FOLDER = BASE_DIR / 'uploads'
    ALLOWED_EXTENSIONS = {'pdf', 'png', 'jpg', 'jpeg'}
ج) extensions/database.py:
python
from flask_sqlalchemy import SQLAlchemy
from psycopg2 import pool

db = SQLAlchemy()

class DBPool:
    _connection_pool = None
    
    @classmethod
    def init_pool(cls, config):
        cls._connection_pool = pool.SimpleConnectionPool(
            1, 10,
            host=config['host'],
            database=config['database'],
            user=config['user'],
            password=config['password'],
            port=config.get('port', '5432')
        )
    
    @classmethod
    def get_conn(cls):
        return cls._connection_pool.getconn()
    
    @classmethod
    def return_conn(cls, conn):
        cls._connection_pool.putconn(conn)
3. نماذج البيانات (مثال models/student.py):
python
from extensions.database import db
from sqlalchemy.orm import relationship

class Student(db.Model):
    __tablename__ = 'eleves'
    
    id_el = db.Column(db.Integer, primary_key=True)
    num_el = db.Column(db.String(50), unique=True, nullable=False)
    nom_el = db.Column(db.String(100), nullable=False)
    tel = db.Column(db.String(20))
    gender = db.Column(db.String(10))
    ader_parent = db.Column(db.String(200))
    
    # العلاقات
    classes = relationship('ClassStudent', back_populates='student')
    grades = relationship('Grade', back_populates='student')
    payments = relationship('Payment', back_populates='student')
    
    def __repr__(self):
        return f'<Student {self.num_el} - {self.nom_el}>'
    
    def to_dict(self):
        return {
            'id': self.id_el,
            'student_number': self.num_el,
            'name': self.nom_el,
            'phone': self.tel,
            'gender': self.gender,
            'parent_address': self.ader_parent
        }
4. مسارات الطلاب (routes/students.py):
python
from flask import Blueprint, render_template, request, flash, redirect, url_for, session
from models.student import Student
from models.academic import Class
from extensions.database import db
from utils.decorators import login_required, admin_required

students_bp = Blueprint('students', __name__)

@students_bp.route('/')
@login_required
def list_students():
    try:
        if 'annee_info' not in session:
            flash('الرجاء اختيار سنة دراسية أولاً', 'warning')
            return redirect(url_for('academic.select_year'))
        
        id_ann = session['annee_info']['id_ann']
        students = Student.query.join(ClassStudent).filter_by(id_ann=id_ann).all()
        classes = Class.query.all()
        
        return render_template('students/list.html',
                            students=students,
                            classes=classes,
                            annee_info=session['annee_info'])
    
    except Exception as e:
        flash(f'حدث خطأ في قاعدة البيانات: {str(e)}', 'danger')
        return redirect(url_for('dashboard'))

@students_bp.route('/add', methods=['POST'])
@login_required
@admin_required
def add_student():
    # كود إضافة طالب جديد
    pass

# باقي الدوال...
5. ديكورات مخصصة (utils/decorators.py):
python
from functools import wraps
from flask import flash, redirect, url_for, session

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not session.get('logged_in'):
            flash('الرجاء تسجيل الدخول أولاً', 'danger')
            return redirect(url_for('auth.login'))
        return f(*args, **kwargs)
    return decorated_function

def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not session.get('is_admin'):
            flash('ليس لديك صلاحية للوصول إلى هذه الصفحة', 'danger')
            return redirect(url_for('dashboard'))
        return f(*args, **kwargs)
    return decorated_function
6. مثال على قالب الطلاب (templates/students/list.html):
html
{% extends "base.html" %}

{% block title %}إدارة الطلاب{% endblock %}

{% block content %}
<div class="container py-4">
    <h2 class="mb-4">قائمة الطلاب</h2>
    
    <div class="card mb-4">
        <div class="card-header">
            <h5>إضافة طالب جديد</h5>
        </div>
        <div class="card-body">
            <form method="POST" action="{{ url_for('students.add_student') }}">
                <!-- حقول النموذج -->
            </form>
        </div>
    </div>
    
    <div class="card">
        <div class="card-header">
            <h5>الطلاب المسجلين</h5>
        </div>
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>اسم الطالب</th>
                        <th>الصف</th>
                        <th>الهاتف</th>
                        <th>إجراءات</th>
                    </tr>
                </thead>
                <tbody>
                    {% for student in students %}
                    <tr>
                        <td>{{ student.num_el }}</td>
                        <td>{{ student.nom_el }}</td>
                        <td>{{ student.classes[0].class.nom_cl if student.classes else '' }}</td>
                        <td>{{ student.tel }}</td>
                        <td>
                            <a href="{{ url_for('students.edit', id=student.id_el) }}" class="btn btn-sm btn-primary">
                                تعديل
                            </a>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>
{% endblock %}
7. كيفية تشغيل المشروع:
قم بتثبيت المتطلبات:

bash
pip install -r requirements.txt
قم بتشغيل التطبيق:

bash
python app.py
